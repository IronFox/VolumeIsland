// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel EmitVertex


struct Vertex
{
    float3 position;
    float3 normal;
};
RWStructuredBuffer<Vertex> VertexOut;
AppendStructuredBuffer<uint> CellOut;
Texture3D<float> Volume;
float3 Origin;
float VoxelSize;
uint SizeInVoxels;
RWTexture3D<uint> IndexOutMapX;
RWTexture3D<uint> IndexOutMapY;
RWTexture3D<uint> IndexOutMapZ;


AppendStructuredBuffer<float> DebugOut;

//AppendStructuredBuffer<uint4> DebugIndexOutY;
//AppendStructuredBuffer<uint4> DebugIndexOutZ;

//shared float sharedDensity[THREADS_PER_GROUP_X + 2][THREADS_PER_GROUP_Y + 2];


static const float iso = 0.5;

groupshared float loaded[11][11][11];

#define OFF 1
#define UE1 9
#define UE2 10
#define LE1 0

float v(int3 coord)
{
    return Volume[clamp(coord, 0, SizeInVoxels - 1)];
    //return 0;
}

[numthreads(8,8,8)]
void EmitVertex(uint3 id : SV_DispatchThreadID, uint3 localId : SV_GroupThreadID)
{
    //if (all(id < SizeInVoxels))
    {
        
        uint3 loadedId = localId * 11 / 8;
        uint3 endId = (localId + 1) * 11 / 8;
        
        for (uint x = loadedId.x; x < endId.x; x++)
            for (uint y = loadedId.y; y < endId.y; y++)
                for (uint z = loadedId.z; z < endId.z; z++)
                    loaded[x][y][z] = v((id - localId) - OFF + int3(x, y, z));

    }
    
    AllMemoryBarrierWithGroupSync();
    
    
    if (any(id >= SizeInVoxels))
        return;
    

    

    //if (any(id + 1 == SizeInVoxels))
    //    return;

    uint3 v0 = localId + OFF;
    uint3 v_1 = v0 - 1;
    uint3 v1 = v0 + 1;
    uint3 v2 = v1 + 1;



    float d = loaded[v0.x][v0.y][v0.z];
    float dx = loaded[v1.x][v0.y][v0.z];
    float dy = loaded[v0.x][v1.y][v0.z];
    float dz = loaded[v0.x][v0.y][v1.z];
    float dnx = loaded[v_1.x][v0.y][v0.z];
    float dny = loaded[v0.x][v_1.y][v0.z];
    float dnz = loaded[v0.x][v0.y][v_1.z];
    
    float dxy = loaded[v1.x][v1.y][v0.z];
    float dyz = loaded[v0.x][v1.y][v1.z];
    float dxz = loaded[v1.x][v0.y][v1.z];
    float dxyz = loaded[v1.x][v1.y][v1.z];

    bool4 d0 = float4(d, dx, dy, dz) >= iso;
    bool4 d1 = float4(dxy, dyz, dxz, dxyz) >= iso;
    
    

    //bool debugEmit = all(id == uint3(0, 0, 0));

    //if (!debugEmit)
    //    return;

    uint cubeindex = 0;
    if (all(id < SizeInVoxels-1))
        if ((any(d0) || any(d1)) && !(all(d0) && all(d1)))
    {
        float value0 = d;
        float value1 = dx; // px    <- 1
        float value2 = dy; // py    <- 2
        float value3 = dxy; // pxy
        float value4 = dz; // pz
        float value5 = dxz; // pxz
        float value6 = dyz; // pyz
        float value7 = dxyz; // pxyz

        if (value0 < iso)
            cubeindex |= 1<<0;
        if (value1 < iso)
            cubeindex |= 1<<1;//
        if (value2 < iso)
            cubeindex |= 1<<3;
        if (value3 < iso)
            cubeindex |= 1<<2;
        if (value4 < iso)
            cubeindex |= 1<<4;
        if (value5 < iso)
            cubeindex |= 1<<5;
        if (value6 < iso)
            cubeindex |= 1<<7;
        if (value7 < iso)
            cubeindex |= 1<<6;

        uint4 u4 = uint4(id, cubeindex);
            
        CellOut.Append((u4.x) | (u4.y << 8) | (u4.z << 16) | (u4.w << 24));
    }

    float3 neighbors = float3(dx, dy, dz);
    
    float3 delta = neighbors - d;
    float3 delta2 = neighbors - float3(dnx, dny, dnz);
    
    float3 x = (iso - d) / delta;
    bool3 edge = x >= 0 && x < 1;
    float3 p0 = Origin + VoxelSize * id;
    

    //if (any(edge))
    //{
    //    uint i = VertexOut.IncrementCounter();
    //    Vertex v;
    //    v.position = p0;
    //    v.position.x += VoxelSize * x.x;
    //    v.normal = normalize(-delta);
    //    VertexOut[i] = v;
    //}
    
    if (edge.x)
    {
        uint i = VertexOut.IncrementCounter();
        IndexOutMapX[id] = i;
        Vertex v;
        v.position = p0;
        v.position.x += VoxelSize * x.x;
        
        float3 n0 = delta2;
        float3 n1 = 
        
        float3(
            loaded[v2.x][v0.y][v0.z] - loaded[v0.x][v0.y][v0.z],
            loaded[v1.x][v1.y][v0.z] - loaded[v1.x][v_1.y][v0.z],
            loaded[v1.x][v0.y][v1.z] - loaded[v1.x][v0.y][v_1.z]
        );
        
        v.normal = normalize(-lerp(n0, n1, x.x));
        VertexOut[i] = v;
        //DebugIndexOutX.Append(int4(id, i));
    }
    else
        IndexOutMapX[id] = 0xffffffff;


    if (edge.y)
    {
        uint i = VertexOut.IncrementCounter();
        IndexOutMapY[id] = i;
        Vertex v;
        v.position = p0;
        v.position.y += VoxelSize * x.y;
        
        float3 n0 = delta2;
        float3 n1 = 
        float3(
            loaded[v1.x][v1.y][v0.z] - loaded[v_1.x][v1.y][v0.z],
            loaded[v0.x][v2.y][v0.z] - loaded[v0.x][v0.y][v0.z],
            loaded[v0.x][v1.y][v1.z] - loaded[v0.x][v1.y][v_1.z]
        );
        
        
        v.normal = normalize(-lerp(n0, n1, x.y));
        VertexOut[i] = v;
        //DebugIndexOutY.Append(int4(id, i));
    }
    else
        IndexOutMapY[id] = 0xffffffff;
    if (edge.z)
    {
        uint i = VertexOut.IncrementCounter();
        IndexOutMapZ[id] = i;
        Vertex v;
        v.position = p0;
        v.position.z += VoxelSize * x.z;
        
        float3 n0 = delta2;
        float3 n1 =
        
        float3(
            loaded[v1.x][v0.y][v1.z] - loaded[v_1.x][v0.y][v1.z],
            loaded[v0.x][v1.y][v1.z] - loaded[v0.x][v_1.y][v1.z],
            loaded[v0.x][v0.y][v2.z] - loaded[v0.x][v0.y][v0.z]
        );
        
        
        v.normal = normalize(-lerp(n0, n1, x.z));
        VertexOut[i] = v;
        //DebugIndexOutZ.Append(int4(id,i));
    }
    else
        IndexOutMapZ[id] = 0xffffffff;
}
